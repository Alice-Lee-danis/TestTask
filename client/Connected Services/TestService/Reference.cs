//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace client.TestService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventsClient", Namespace="http://schemas.datacontract.org/2004/07/Test")]
    [System.SerializableAttribute()]
    public partial class EventsClient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime dateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mouseClickField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mouseXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int mouseYField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                if ((this.dateField.Equals(value) != true)) {
                    this.dateField = value;
                    this.RaisePropertyChanged("date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mouseClick {
            get {
                return this.mouseClickField;
            }
            set {
                if ((object.ReferenceEquals(this.mouseClickField, value) != true)) {
                    this.mouseClickField = value;
                    this.RaisePropertyChanged("mouseClick");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mouseX {
            get {
                return this.mouseXField;
            }
            set {
                if ((this.mouseXField.Equals(value) != true)) {
                    this.mouseXField = value;
                    this.RaisePropertyChanged("mouseX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mouseY {
            get {
                return this.mouseYField;
            }
            set {
                if ((this.mouseYField.Equals(value) != true)) {
                    this.mouseYField = value;
                    this.RaisePropertyChanged("mouseY");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestService.ITestService")]
    public interface ITestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/Recording", ReplyAction="http://tempuri.org/ITestService/RecordingResponse")]
        client.TestService.EventsClient[] Recording(int cursorX, int cursorY, string eventClick, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/Recording", ReplyAction="http://tempuri.org/ITestService/RecordingResponse")]
        System.Threading.Tasks.Task<client.TestService.EventsClient[]> RecordingAsync(int cursorX, int cursorY, string eventClick, System.DateTime dateTime);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestServiceChannel : client.TestService.ITestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceClient : System.ServiceModel.ClientBase<client.TestService.ITestService>, client.TestService.ITestService {
        
        public TestServiceClient() {
        }
        
        public TestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public client.TestService.EventsClient[] Recording(int cursorX, int cursorY, string eventClick, System.DateTime dateTime) {
            return base.Channel.Recording(cursorX, cursorY, eventClick, dateTime);
        }
        
        public System.Threading.Tasks.Task<client.TestService.EventsClient[]> RecordingAsync(int cursorX, int cursorY, string eventClick, System.DateTime dateTime) {
            return base.Channel.RecordingAsync(cursorX, cursorY, eventClick, dateTime);
        }
    }
}
